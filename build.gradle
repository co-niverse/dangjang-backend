plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id "org.sonarqube" version "3.4.0.2513"
    id "jacoco"
}

group = 'dangjang'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'com.h2database:h2'

    // security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

    // jwt
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'

    // mapstruct
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation("it.ozimov:embedded-redis:0.7.2")

    // mongo db
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo.spring30x:4.7.0'

    // kafka
    implementation 'org.springframework.kafka:spring-kafka:3.0.11'

    // kinesis KPL
    implementation 'software.amazon.kinesis:amazon-kinesis-client:2.5.2'

    // aop
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    // slack
    implementation 'com.github.maricn:logback-slack-appender:1.6.1'

    // actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

sonarqube {
    properties {
        property "sonar.projectKey", "co-niverse_dangjang-backend_AYj2jZJELehUZAlqDvRk"
        property "sonar.language", "java"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.java.binaries", "${buildDir}/classes"
        property "sonar.test.inclusions", "**/*Test.java"
        property "sonar.exclusions", "**/*Application*, **/*Exception*, **/dto/**, **/entity/**, **/infrastructure/**, **/global/config/**, **/global/support/**, **/mapper/**, **/vo/**, **/document/**, **/filter/**, **/handler/**, **/aop/**"
    }
}

jacoco {
    toolVersion = "0.8.10"
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false

        html.destination file("${buildDir}/jacoco/jacoco.html")
    }
    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: [
                            '**/*Application*',
                            '**/*Exception*',
                            '**/dto/**',
                            '**/entity/**',
                            '**/document/**',
                            '**/infrastructure/**',
                            '**/global/config/**',
                            '**/global/support/**',
                            '**/mapper/**',
                            '**/vo/**',
                            '**/document/**',
                            '**/filter/**',
                            '**/handler/**',
                            '**/aop/**'
                    ])
                })
        )
    }
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.70
            }
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.70
            }
            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 300
            }
            limit {
                counter = 'METHOD'
                value = 'TOTALCOUNT'
                maximum = 20
            }
            excludes = [
                    '*.*Application',
                    '*.*Exception*',
                    '*.dto.*',
                    '*.entity.*',
                    '*.document.*',
                    '*.infrastructure.*',
                    '*.global.config.*',
                    '*.global.support.*',
                    '*.mapper.*',
                    '*.vo.*',
                    '*.document.*',
                    '*.filter.*',
                    '*.handler.*',
                    '*.aop.*'
            ]
        }
    }
}
